import cv2
import numpy as np


def circle_detect(frame):
    # loading image
    (h, w) = frame.shape[:2]
    new_width = 800
    aspect_ratio = h / w
    new_height = int(new_width * aspect_ratio)
    frame = cv2.resize(frame, (new_width, new_height))
    copy = frame.copy()

    # image enhancement
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (7, 7), 0)

    # creating the mask
    mask = np.zeros(frame.shape[:2], dtype="uint8")

    # finding thresh and contours
    thresh = cv2.adaptiveThreshold(blur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV, 11, 2)
    contours, hierarchy = cv2.findContours(thresh, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)

    for contour in contours:
        # filtering contours
        if cv2.contourArea(contour) > 900:
            # drawing the contours
            cv2.drawContours(mask, [contour], -1, 255, -1)
            cv2.imshow("hey", mask)

    # creating 3x3 kernel
    kernel = np.ones((3, 3), np.uint8)

    # morph closing
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel, iterations=2)

    # masking original img
    masked_img = cv2.bitwise_and(frame, frame, mask=mask)

    # convert to grayscale
    gray = cv2.cvtColor(masked_img, cv2.COLOR_BGR2GRAY)
    blur = cv2.medianBlur(gray, 5)

    # circle detection
    circles = cv2.HoughCircles(blur, cv2.HOUGH_GRADIENT, 1.3, 300, None, 300)
    if circles is not None:
        # convert x y coords into ints
        circles = np.round(circles[0, :]).astype("int")
        # looping over coords n radius
        for (x, y, r) in circles:
            # drawing circle
            cv2.circle(copy, (x, y), r, (200, 50, 500), 4)
            # center point
            cv2.rectangle(copy, (x - 5, y - 5), (x + 5, y + 5), (395, 102, 400), -1)
    return copy


cap = cv2.VideoCapture('IMG_7943.MOV')
# checking if camera is opened
if (cap.isOpened() == False):
    print("error")

while (cap.isOpened()):
    # capture frame
    ret, frame = cap.read()
    if ret == True:
        # applying overlay
        frame = circle_detect(frame)
        cv2.imshow('Video Circle Detection Frame!', frame)

        # exiting
        if cv2.waitKey(30) & 0xFF == ord('q'):
            break
    else:
        print("vid finished")
        break

cap.release()
cv2.destroyAllWindows()

import cv2
import numpy as np

#loading image
img = cv2.imread('multiple.jpg')
(h, w) = img.shape[:2]
new_width = 800
aspect_ratio = h / w
new_height = int(new_width * aspect_ratio)
img = cv2.resize(img, (new_width, new_height))
copy = img.copy()

#image enhancement
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
blur = cv2.medianBlur(gray, 7)

#finding thresh and contours
thresh = cv2.adaptiveThreshold(blur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV, 11, 2)
contours, hierarchy = cv2.findContours(thresh, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)

#creating the mask
mask = np.zeros(img.shape[:2], dtype="uint8")
for contour in contours:
   #filtering contours
   if cv2.contourArea(contour) > 500:
       #drawing the contours
       cv2.drawContours(mask, [contour], -1, 255, -1)

#creating 3x3 kernel
kernel = np.ones((3, 3), np.uint8)
#morph closing
mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel, iterations=2)

#masking original img
masked_img = cv2.bitwise_and(img, img, mask=mask)

#creating bg mask
background = np.zeros_like(img)
masked_background = cv2.bitwise_and(background, background, mask=cv2.bitwise_not(mask))

#combining img n bg mask
final_result = cv2.add(masked_img, masked_background)
cv2.imshow("hey", final_result)
#convert to grayscale
gray= cv2.cvtColor(final_result, cv2.COLOR_BGR2GRAY)

#circle detection
circles = cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT, 1.2, 200, None, 300)
if circles is not None:
   #convert x y coords into ints
   circles = np.round(circles[0, :]).astype("int")
   #looping over coords n radius
   for (x, y, r) in circles:
       #drawing circle
       cv2.circle(copy, (x, y), r, (200, 50, 500), 4)
       #drawing center
       cv2.rectangle(copy, (x - 5, y - 5), (x + 5, y + 5), (0, 128, 255), -1)

#results
cv2.imshow("Image with Mask and Detected Circles", copy)
cv2.waitKey(0)
cv2.destroyAllWindows()




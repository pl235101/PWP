import cv2
import numpy as np
import math
# source: https://stackoverflow.com/questions/1401712/how-can-the-euclidean-distance-be-calculated-with-numpy
def distance(p1, p2):
    return np.linalg.norm(np.array(p1) - np.array(p2))

# source: https://stackoverflow.com/questions/2827393/angles-between-two-n-dimensional-vectors-in-python
def angles(p1, p2, p3, p4):
    #vector 1
    v1 = np.array([p2[0] - p1[0], p2[1] - p1[1]])
    #vector 2
    v2 = np.array([p4[0] - p3[0], p4[1] - p3[1]])
    #dot product
    dotp = np.dot(v1, v2)
    #cross product
    crossp = np.cross(v1, v2)
    
    angle = np.arctan2(np.abs(crossp), dotp)

    # converting back to degrees
    angle = np.degrees(angle)
    return angle

def process_frame(frame):
    roi = frame[100:600, 250:1100]

    # enhancing frame
    # grayscale
    gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
    # gaussian blur
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    # canny edge
    edges = cv2.Canny(blur, 50, 150, apertureSize=3)

    # expanding white areas
    dilation = cv2.dilate(edges, np.array([5, 5]), iterations=20)
    # getting rid of small holes (cleaner line)
    closing = cv2.morphologyEx(dilation, cv2.MORPH_CLOSE, np.array([9, 9]))
    # shrinking white areas back
    erosion = cv2.erode(closing, np.array([5, 5]), iterations=10)
    
    # making copy of roi
    croi = roi.copy()

    # hough line detection
    lines = cv2.HoughLinesP(erosion, rho=1, theta=np.pi / 180, threshold=200, minLineLength=200, maxLineGap=500)

    # list 1, dissimilar lines to base
    l1 = []

    # list 2, similar lines to base
    l2 = []

    # making sure they exist
    if lines is not None:
        # setting the first detected line as the base
        x1, y1, x2, y2 = lines[0][0]
        # start pt
        base_start = (x1, y1)

        # endpt
        base_end = (x2, y2)

        # setting the first line as l1
        l1.append([(x1, y1), (x2, y2)])

        # checking other detected lines
        for line in lines[1:]:
            x1, y1, x2, y2 = line[0]
            l_start = (x1, y1)
            l_end = (x2, y2)

            # finding angle diff between 1st line n detected line (sorting)
            angle = angles(base_start, base_end, l_start, l_end)

            # filtering through length
            length = np.linalg.norm(np.array([x2 - x1, y2 - y1]))
            if length < 500:
                # big diff
                if angle > 10:
                    l1.append([(x1, y1), (x2, y2)])
                # small diff
                else: 
                    l2.append([(x1, y1), (x2, y2)])

        # Initialize endpoints with default values
        b_endpt_1 = t_endpt_1 = (0, 0)
        b_endpt_2 = t_endpt_2 = (0, 0)

        if len(l1) > 1:
            # drawing the 2 lines
            cv2.line(croi, l1[0][0], l1[0][1], (0, 255, 0), 8)
            cv2.line(croi, l1[1][0], l1[1][1], (0, 255, 0), 8)

            # setting center of the roi as reference pt
            r_point = (croi.shape[1] // 2, croi.shape[0] // 2)

            # finding top and bottom endpts for base line (line1)
            x1, y1, x2, y2 = l1[0][0][0], l1[0][0][1], l1[0][1][0], l1[0][1][1]
            b_endpt_1 = (x1, y1) if distance((x1, y1), r_point) > distance((x2, y2), r_point) else (x2, y2)
            t_endpt_1 = (x1, y1) if distance((x1, y1), r_point) < distance((x2, y2), r_point) else (x2, y2)

            # finding top and bottom endpts for line2 by comparing distances
            x1, y1, x2, y2 = l1[1][0][0], l1[1][0][1], l1[1][1][0], l1[1][1][1]
            # finding the pt closest to the endpt
            if distance((x1, y1), b_endpt_1) < distance((x2, y2), b_endpt_1):
                b_endpt_2, t_endpt_2 = (x1, y1), (x2, y2)
            else:
                b_endpt_2, t_endpt_2 = (x2, y2), (x1, y1)

            # drawing the endpts
            # blue for bottom
            cv2.circle(croi, b_endpt_1, 10, (255, 0, 0), -1)  
            cv2.circle(croi, b_endpt_2, 10, (255, 0, 0), -1)

            # yellow for top
            cv2.circle(croi, t_endpt_1, 10, (0, 255, 255), -1) 
            cv2.circle(croi, t_endpt_2, 10, (0, 255, 255), -1)

            # calculating midpts
            midpt1 = ((l1[0][0][0] + l1[0][1][0]) // 2, (l1[0][0][1] + l1[0][1][1]) // 2)
            midpt2 = ((l1[1][0][0] + l1[1][1][0]) // 2, (l1[1][0][1] + l1[1][1][1]) // 2)

            # drawing midpts (red!)
            cv2.circle(croi, midpt1, 10, (0, 0, 255), -1) 
            cv2.circle(croi, midpt2, 10, (0, 0, 255), -1)

            # "horizontally" connecting the pts to form a row of centerpts
            c1 = ((midpt1[0] + midpt2[0]) // 2, (midpt1[1] + midpt2[1]) // 2)
            c2 = ((b_endpt_1[0] + b_endpt_2[0]) // 2, (b_endpt_1[1] + b_endpt_2[1]) // 2)
            c3 = ((t_endpt_1[0] + t_endpt_2[0]) // 2, (t_endpt_1[1] + t_endpt_2[1]) // 2)

            # drawing them out
            cv2.circle(croi, c1, 10, (42, 42, 165), -1)
            cv2.circle(croi, c2, 10, (42, 42, 165), -1)
            cv2.circle(croi, c3, 10, (42, 42, 165), -1)

            # making them into an array (connecting for centerline)
            points = np.array([c1, c2, c3], np.int32) 
            # reshaping for polylines 
            points = points.reshape((-1, 1, 2)) 
            # drawing as polyline 
            cv2.polylines(croi, [points], isClosed=False, color=(0, 255, 255), thickness=2)

    # putting back roi
    frame[100:600, 250:1100] = croi
    return frame

# video capture
cap = cv2.VideoCapture(0)

if not cap.isOpened():
    print("uh oh error")
    exit()

while True:
    ret, frame = cap.read()
    if not ret:
        break
    processed_frame = process_frame(frame)
    # drawing out roi
    cv2.rectangle(processed_frame, (250, 100), (1100, 600), (0, 255, 0), 2)
    # displaying overlay
    cv2.imshow("Detection", processed_frame)
    # exit w "q"
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

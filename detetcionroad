import cv2
import numpy as np
import math

def sharpen(frame):
    kernel = np.array ([[-1,-1,-1],
                        [-1,9,-1],
                        [-1,-1,-1]])
    sharpened = cv2.filter2D(frame,-1,kernel)
    return sharpened

def thresh(frame):
    #kernel for morphology
    kernel = np.ones((41, 41), np.uint8)

    #applying grayscale, gaussian blur, and canny edge detection to enhance the frame
    sharp = sharpen(frame)
    gray = cv2.cvtColor(sharp, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    # th3 = cv2.adaptiveThreshold(blur,255,cv2.ADAPTIVE_THRESH_MEAN_C, \
    #                                  cv2.THRESH_BINARY,11,2)
    canny = cv2.Canny(blur,50,100)
    #applying morphology close to clean up the image
    closing = cv2.morphologyEx(canny, cv2.MORPH_CLOSE, kernel, iterations=1)
    return canny

def perspective(frame):
    # Define points for drawing circles
    bl = [300, 832]
    br = [1550, 849]
    tr = [1150, 500]
    tl = [850, 500]
    rect = np.array([tl, tr, br, bl], dtype="float32")
    
    # Draw circles on the frame at the points
    cv2.circle(frame, tuple(tl), 5, (0, 0, 255), -1)  # Top-left
    cv2.circle(frame, tuple(tr), 5, (0, 0, 255), -1)  # Top-right
    cv2.circle(frame, tuple(br), 5, (0, 0, 255), -1)  # Bottom-right
    cv2.circle(frame, tuple(bl), 5, (0, 0, 255), -1)  # Bottom-left
    
    # You can also draw lines to form a rectangle if needed
    cv2.line(frame, tuple(tl), tuple(tr), (0, 255, 0), 2)  # Top edge
    cv2.line(frame, tuple(tr), tuple(br), (0, 255, 0), 2)  # Right edge
    cv2.line(frame, tuple(br), tuple(bl), (0, 255, 0), 2)  # Bottom edge
    cv2.line(frame, tuple(bl), tuple(tl), (0, 255, 0), 2)  # Left edge

    #copied from https://pyimagesearch.com/2014/08/25/4-point-opencv-getperspective-transform-example/ change later
    widthA = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))
    widthB = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
    maxWidth = max(int(widthA), int(widthB))

    heightA = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))
    heightB = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))
    maxHeight = max(int(heightA), int(heightB))

    dst = np.array([
		[0, 0],
		[maxWidth - 1, 0],
		[maxWidth - 1, maxHeight - 1],
		[0, maxHeight - 1]], dtype = "float32")

    M = cv2.getPerspectiveTransform(rect, dst)
    warped = cv2.warpPerspective(frame, M, (maxWidth, maxHeight))
    return warped

def process_frame(frame):
    copy = frame.copy()
    # roi = frame[400:800, 0:1980]
    warped = perspective(frame)
    thresh_warped= thresh(warped)


    # th3 = cv2.Canny(blur, 10, 80, 3)
    thinned = cv2.ximgproc.thinning(thresh_warped)
    #detecting any contours
    contours, _ = cv2.findContours(thinned, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

    #making a list to store detected contours
    detected_contours = []

    for contour in contours:
        #finding the perimeter of the contour
        p=cv2.arcLength(contour, True)
        #filtering contours to ignore irrelevant ones
        if p >500:
            approx = cv2.approxPolyDP(contour, 6, True)
            #adding contours to the list
            detected_contours.append(approx)
    #creating a new list for valid contours
    valid = []
    #list for midpoints
    mid = []

    if len(detected_contours) >= 2:
        #sorting the contour list based on least to greatest area and taking 2 largest contours)
        valid = sorted(detected_contours, key=cv2.contourArea, reverse=True)[:2]

    if len(valid) == 2:
        #setting line 1 as the largest contour
        lin1 = valid[0]
        #setting line 2 as the second largest
        lin2 = valid[1]

        #turning the line into a numpy array
        lin1 = np.array(lin1)
        lin2 = np.array(lin2)

        if lin1 is not None and lin2 is not None:
            #finding the minimum length between the 2 arrays
            min_len = min(len(lin1), len(lin2))

            #cropping each line to fit the minimum length
            lin1 = lin1[:min_len]
            lin2 = lin2[:min_len]

            #iterating through list
            for i in range(min_len):
                #extracting coordinates
                x1, y1 = lin1[i, 0]
                x2, y2 = lin2[i, 0]

            #finding the average of each coordinate
                mid_x = (x1 + x2) // 2
                mid_y = (y1 + y2) // 2
                #adding coordinates to list
                mid.append([mid_x, mid_y])

            #turning list into a numpy array
            mid =np.array(mid)

            if len(mid) >= 1:
                #drawing all the lines
                cv2.polylines(copy, [lin1], False, (255, 0, 0), 5, lineType=cv2.LINE_AA)
                cv2.polylines(copy, [lin2], False, (255, 0, 0), 5, lineType=cv2.LINE_AA)
                cv2.polylines(copy, [mid], False, (0, 0, 255), 3, lineType=cv2.LINE_AA)


    # putting back roi
    # frame[400:800, 0:1980] = roi
    return thresh_warped


# video capture
cap = cv2.VideoCapture("photos/roaddetection.mp4")

if not cap.isOpened():
    print("uh oh error")
    exit()

while True:
    ret, frame = cap.read()
    if not ret:
        break
    processed_frame = process_frame(frame)
    # drawing out roi

    # cv2.rectangle(processed_frame, (0, 900), (1880, 400), (0, 255, 0), 2)
    # displaying overlay
    cv2.imshow("Detection", processed_frame)
    # exit w "q"
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

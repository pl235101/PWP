import cv2
import numpy as np
import math

def sharpen(frame):
    kernel = np.array([[-1, -1, -1],
                       [-1, 9, -1],
                       [-1, -1, -1]])
    sharpened = cv2.filter2D(frame, -1, kernel)
    return sharpened

def skeleton(frame):
    thinned = cv2.ximgproc.thinning(frame)
    return thinned

def slope(x1, y1, x2, y2):
    slope = (y2 - y1) / (x2 - x1 + 1e-6)
    return slope

def preprocess(frame):
    frame = sharpen(frame)
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    hue, sat, val = cv2.split(hsv)
    avg_val = np.mean(val)
    low_white = np.array([0, 0, 200], dtype='uint8')
    up_white = np.array([180, 80, 255], dtype='uint8')
    mask1 = cv2.inRange(hsv, low_white, up_white)
    low_yellow = np.array([18, 80, 100], dtype=np.uint8)
    up_yellow = np.array([30, 255, 255], dtype=np.uint8)
    mask2 = cv2.inRange(hsv, low_yellow, up_yellow)
    lane_mask = cv2.bitwise_or(mask1, mask2)
    kernel = np.ones((3, 3), np.uint8)  # Smaller kernel
    open = cv2.morphologyEx(lane_mask, cv2.MORPH_OPEN, kernel, iterations=2)
    closed = cv2.morphologyEx(open, cv2.MORPH_CLOSE, kernel, iterations=2)
    #    canny = cv2.Canny(closed, 50, 100)
    thinned = skeleton(closed)

    return thinned

def roi(edges):
    # code copied, change later
    height, width = edges.shape
    mask = np.zeros_like(edges)
    polygon = np.array([[
        (0, height),
        (0, height / 2),
        (width, height / 2),
        (width, height),
    ]], np.int32)
    cv2.fillPoly(mask, polygon, 255)  # fill the polygon with blue color
    cropped_edges = cv2.bitwise_and(edges, mask)
    cv2.imshow("roi", cropped_edges)
    return cropped_edges
#change perspective to be higher?
def perspective(frame):
# copied, change later
    copy = frame.copy()
    height, width = frame.shape[:2]

    og_pts = np.float32([
        (280, 960),  # Bottom-left
        (1780, 960),  # Bottom-right
        (1230, 710),  # Top-left
        (900, 710)
    ])
    dst_pts = np.float32([
        (400, height),  # Bottom-left (Shifted inward to keep lanes straight)
        (width - 400, height),  # Bottom-right
        (width - 400, 0),  # Top-right
        (400, 0)  # Top-left
    ])
    matrix = cv2.getPerspectiveTransform(og_pts, dst_pts)
    warped = cv2.warpPerspective(frame, matrix, (width, height))
    return warped

def transparent(background, overlay):
    h, w = background.shape[:2]
    new_h = h // 5
    new_w = w // 5
    resized = cv2.resize(overlay, (new_w, new_h))

    x = w - new_w
    y = 0

    roi = background[y:y + new_h, x:x + new_w]

    overlay_color = resized[:, :, :3]
    overlay_alpha = resized[:, :, 3:] / 255

    blend = overlay_alpha * overlay_color + (1 - overlay_alpha) * roi

    background[y:y + new_h, x:x + new_w] = blend

    return background

def process(frame):
    warped = perspective(frame)
    mask = preprocess(warped)
    cv2.imshow("mask",mask)
    # detected = detect_lines(mask)
    # final = draw_straight_lines(warped, detected)
    return mask

video = cv2.VideoCapture("roaddetection.mp4")

while True:
    ret, frame = video.read()
    processed = process(frame)
    # overlay = cv2.imread("redarrow.png", cv2.IMREAD_UNCHANGED)
    # bg = transparent(frame, overlay)
    cv2.imshow("og", frame)
    cv2.imshow("final", processed)
    key = cv2.waitKey(1)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
